import astra
import numpy as np

def cone_beam_reconstruction(projections, angles, detector_size, src_to_obj_dist, src_to_det_dist, vol_size):
    """
    Perform cone-beam tomographic reconstruction using Astra Toolbox.

    Parameters:
    -----------
    projections : numpy array
        The cone-beam projections (2D projections at different angles) with shape (num_angles, detector_size).
    angles : numpy array
        The projection angles in radians.
    detector_size : int
        The number of detector elements (pixels) in one dimension.
    src_to_obj_dist : float
        The distance from the source to the object (in millimeters or the appropriate unit).
    src_to_det_dist : float
        The distance from the source to the detector.
    vol_size : int
        Size of the reconstructed volume (cubic dimensions in pixels).
    
    Returns:
    --------
    reconstruction : numpy array
        The reconstructed 3D volume as a NumPy array.
    """
    
    # Number of projections
    num_projections = projections.shape[0]
    
    # Create volume geometry (3D volume to be reconstructed)
    vol_geom = astra.create_vol_geom(vol_size, vol_size, vol_size)
    
    # Define projection geometry (Cone-Beam 3D)
    proj_geom = astra.create_proj_geom(
        'cone', 1.0, detector_size, detector_size, angles, src_to_obj_dist, src_to_det_dist
    )
    
    # Create a 3D sinogram (projector data) for reconstruction
    sinogram_id = astra.data3d.create('-proj3d', proj_geom, projections)
    
    # Create a data3D object for the volume
    vol_id = astra.data3d.create('-vol', vol_geom)
    
    # Configure reconstruction using FBP (Filtered Back Projection) for cone-beam geometry
    cfg = astra.astra_dict('FBP_CUDA')
    cfg['ReconstructionDataId'] = vol_id
    cfg['ProjectionDataId'] = sinogram_id
    cfg['option'] = {}
    cfg['option']['FilterType'] = 'Ram-Lak'
    
    # Run the reconstruction
    alg_id = astra.algorithm.create(cfg)
    astra.algorithm.run(alg_id)
    
    # Get the result (reconstructed volume)
    reconstruction = astra.data3d.get(vol_id)
    
    # Clean up
    astra.data3d.delete(vol_id)
    astra.data3d.delete(sinogram_id)
    astra.algorithm.delete(alg_id)
    
    return reconstruction
